#!/usr/bin/env python3

# The MIT License (MIT)
# =====================
#
# Copyright © 2020 Azavea
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the “Software”), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

import argparse
import ast
import json

import cloudbuster


def cli_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument('--aoi-name', required=False, type=str)
    parser.add_argument('--geojson', required=True, type=str)
    parser.add_argument('--limit', required=False, default=1024, type=int)
    parser.add_argument('--name-property', required=False, type=str)
    parser.add_argument('--refresh-token', required=True, type=str)
    parser.add_argument('--response', required=False, type=str)
    parser.add_argument('--maxclouds', required=False, default=20, type=int)
    parser.add_argument('--mindate', required=False,
                        nargs='+', type=str, default=['1307-10-13'])
    parser.add_argument('--maxdate', required=False,
                        nargs='+', type=str, default=['2038-01-19'])
    parser.add_argument('--scale', type=float, required=False)
    parser.add_argument('--original-shape',
                        type=ast.literal_eval, required=False, default=False)
    return parser


if __name__ == '__main__':
    args = vars(cli_parser().parse_args())
    geojson = args.pop('geojson', None)
    refresh_token = args.pop('refresh_token', None)
    response = args.pop('response', None)
    aoi_name = args.pop('aoi_name', None)
    name_property = args.pop('name_property', None)

    sentinel_scenes = cloudbuster.query_rf(geojson, refresh_token, **args)

    if aoi_name is None and name_property is not None:
        aoi_name = feature.get('properties').get(name_property)

    if response is None and aoi_name is not None:
        response = './{}.json'.format(aoi_name)

    if response is not None:
        with open(response, 'w') as f:
            json.dump(sentinel_scenes, f, sort_keys=True,
                      indent=4, separators=(',', ': '))
        print(response)
