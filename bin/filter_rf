#!/usr/bin/env python3

# The MIT License (MIT)
# =====================
#
# Copyright © 2020 Azavea
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the “Software”), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

import argparse

import cloudbuster

def cli_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument('--backstop', required=False,
                        default=True, type=ast.literal_eval)
    parser.add_argument('--coverage-count',
                        required=False, default=3, type=int)
    parser.add_argument('--max-selections', required=False, type=int)
    parser.add_argument('--input', required=True, type=str)
    parser.add_argument('--output', required=True, type=str)
    parser.add_argument('--date-regexp', required=False, type=str)
    parser.add_argument('--name-regexp', required=False, type=str)
    parser.add_argument('--minclouds', default=0.0, type=float)
    parser.add_argument('--max-uncovered', default=5e-4, type=float)
    return parser


if __name__ == '__main__':
    args = vars(cli_parser().parse_args())
    input_path = args.pop('input', None)
    output_path = args.pop('output', None)

    with open(input_path, 'r') as f:
        raw_response = json.load(f)

    selections, success = cloudbuster.filter_rf(raw_response, output_path, **args)

    if success:
        with open(output_path, 'w') as f:
            json.dump(selections, f, sort_keys=True,
                      indent=4, separators=(',', ': '))
    else:
        print('ERROR: not covered')
        with open(output_path + '.ERROR', 'w') as f:
            json.dump(selections, f, sort_keys=True,
                      indent=4, separators=(',', ': '))
